// 1. Write a program to implement singly linked list as an ADT that supports the following operations:


#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int d) {
        this->data = d;
        this->next = NULL;
    }

    ~Node() {
        if (this->next != NULL) {
            delete next;
            this->next = NULL;
        }
    }
};

Node* head = NULL;
Node* tail = NULL;

class Linkedlist {
public:
    Linkedlist() {}

    // i.   Insert an element x at the beginning of the singly linked list
    void insertathead(int d) {
        Node* temp = new Node(d);
        temp->next = head;
        head = temp;
        if (tail == NULL) {
            tail = head; 
        }
    }

    void insertattail(int d) {
        Node* temp = new Node(d);
        if (tail == NULL) {
            head = tail = temp;
        } else {
            tail->next = temp;
            tail = temp;
        }
    }

    // ii.  Insert an element x at ith position in the singly linked list
    void insertat(int p, int d) {
        if (p <= 1) {
            insertathead(d);
            return;
        }

        Node* temp = head;
        int c = 1;
        while (c < p - 1) {
            temp = temp->next;
            c++;
            if (temp == NULL) {
                cout << "Invalid Position!!!" << endl;
                return;
            }
        }

        Node* newnode = new Node(d);
        newnode->next = temp->next;
        temp->next = newnode;
    }

    


    // iii. Remove an element from the beginning of the singly linked list.
    void delfront(){

        if (head == NULL) {
        cout<<"Empty list!"<<endl;
        return;}

        Node* temp=head;
        head=temp->next;
        temp->next=NULL;
        if (head == NULL) {
        tail = NULL;  // Update tail when the list becomes empty
    }
    }


    // iv.  Remove an element from ith position in the singly linked list.

    void delnode(int p) {
        if (p <= 0) {
            cout << "Invalid Position!!!" << endl;
            return;
        }
        if (p == 1) {
            Node* temp = head;
            head = head->next;
            if (tail == temp) {
                tail = head; 
            }
            temp->next = NULL;
            delete temp;
        } else {
            Node* curr = head;
            Node* prev = NULL;
            int c = 1;
            while (c < p) {
                prev = curr;
                curr = curr->next;
                c++;
                if (curr == NULL) {
                    cout << "Invalid Position!!!" << endl;
                    return;
                }
            }
            prev->next = curr->next;
            if (tail == curr) {
                tail = prev; 
            }
            curr->next = NULL;
            delete curr;
        }
    }

// vi.  Search for an element x in the singly linked list and return its pointer
    Node* search(int x){
        Node* res= nullptr;
        Node* temp=head;
        while(temp!=NULL){
            if(temp->data==x){
                res= temp;
            }
                temp=temp->next;
        }
        

        if(res!=nullptr){
            cout<<"Element found at address: "<<res<<endl;
            
        }
        else{
            cout<<"Element not found!"<<endl;
        }

        return res;
    }


    void print() {
        Node* temp = head;
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
   
    Linkedlist list;
    list.insertathead(10);
    list.insertattail(20);
    list.insertattail(30);
    list.insertattail(40);

    list.insertat(5, 50);
    list.print();
    list.delfront();
    list.print();
    list.delnode(4);
    list.print();

    list.search(30);



    return 0;
}



--------------------------------------------------------------------------------

// 2. Write a program to implement doubly linked list as an ADT that supports the following operations:


#include<iostream>
using namespace std;


class Node{
public:
    int data;
    Node* next;
    Node* prev;

    Node(int d){
        this->data=d;
        this->next=NULL;
        this->prev=NULL;
        
    }
    ~Node(){
        if(this->next=NULL){
            delete next;
            next=NULL;
        }
    }
};
Node* head;
Node* tail;

class DLinkedlist{
public:
    DLinkedlist(){}

// i. Insert an element x at the beginning of the doubly linked list

    void insertathead(int d){
   
    Node* temp=new Node(d);
    if(head==NULL){
        head=temp;
        tail=temp;
    }
    else{
        temp->next=head;
        head->prev=temp;
        head=temp;
    }

}

// ii. Insert an element x at the end of the doubly linked list

    void insertattail(int d){
    
    Node* temp=new Node(d);
    if(tail==NULL){
        head=temp;
        tail=temp;
    }
    else{
        tail->next=temp;
        temp->prev=tail;
        tail=temp;
    }
}

void insertat(int p,int d){
    if(p==1){
        insertathead(d);
        return;
    }
    Node* temp=head;
    int c=1;
    while(c<p-1){
        temp=temp->next;
        c++;
    }
    if(temp->next==NULL){
        insertattail(d);
        return;

    }

    // Inserting at desired position p:

    Node* newnode=new Node(d);
    newnode->next=temp->next;
    temp->next=newnode;
    newnode->prev=temp;
    newnode->next->prev=newnode;
}
// iii. Remove an element from the beginning of the doubly linked list

    void delfront(){
        Node* temp=head;
        temp->next->prev=NULL;
        head=head->next;
        temp->next=NULL;

        delete temp;
    }
// iv. Remove an element from the end of the doubly linked list

    void delend(){
        Node* temp=tail;
        temp->prev->next=NULL;
        tail=tail->prev;
        temp->prev=NULL;

        delete temp;

    }


// Delnode. . . . 
    void delnode(int p){

        if(p==1){
        Node* temp=head;
        temp->next->prev=NULL;
        head=head->next;
        temp->next=NULL;

        delete temp;

    }
    
    else{
        Node* curr=head;
        Node* pre=NULL;

        int c=1;
        while(c<p){
            pre=curr;
            curr=curr->next;
            c++;
        }
        
        pre->next=curr->next;
        
        // last element is creating a issue when deleting!!
        if(curr->next==NULL){
            curr->prev=NULL;
            delete curr;
          }
        else{
          curr->next->prev=pre;
          delete curr;}

    }
    

}

void print(){
    Node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
};


int main (){

    head=NULL;
    tail=NULL;

    DLinkedlist list;
    list.insertathead(10);
    list.insertattail(20);
    list.insertattail(30);
    list.insertattail(40);

    list.insertat(5, 50);
    list.print();
    list.delfront();
    list.print();
    list.delend();
    list.print();
   

return 0;

}

--------------------------------------------------------------------------------


// 3. Write a program to implement circular linked list as an ADT which supports the following 
// operations:



#include<iostream>
using namespace std;

class Node {
    public:
    int data;
    Node* next;

    Node(int d) {
        this->data = d;
        this->next = NULL;
    }

    ~Node() {
        int value = this->data;
        if(this->next != NULL) {
            delete next;
            next = NULL;
        }
        cout << " memory is free now for value " << value << endl;
    }

};

Node* tail;

class CLinkedlist{
public:
    CLinkedlist(){}

// i. Insert an element x in the list

    void insertNode(int element, int d) {
    
        if(tail == NULL) {
            Node* newNode = new Node(d);
            tail = newNode;
            newNode -> next = newNode;
        }
        else{

            Node* curr = tail;

            while(curr->data != element) {
                curr = curr -> next;
            }

            Node* temp = new Node(d);
            temp -> next = curr -> next;
            curr -> next = temp;
            }
        }    

    void print() {

        Node* temp = tail;

        if(tail == NULL) {
            cout << "List is Empty "<< endl;
            return ;
        }

        do {
            cout << tail -> data << " ";
            tail = tail -> next;
        } while(tail != temp);

        cout << endl;
} 


// ii. Remove an element from the list

    void deleteNode(int value) {
    
        if(tail == NULL) {
            cout << " List is empty, please check again" << endl;
            return;
        }
        else{

            Node* prev = tail;
            Node* curr = prev -> next;

            while(curr -> data != value) {
                prev = curr;
                curr = curr -> next;
            }

            prev -> next = curr -> next;


            if(curr == prev) {
                tail = NULL;
            }

            else if(tail == curr ) {
                tail = prev;
            }

            curr -> next = NULL;
            delete curr;

    }


}

// iii. Search for an element x in the list and return its pointer

     Node* search(int x){
        Node* res= nullptr;
        Node* temp=tail;
        do{
            if(temp->data==x){
                res= temp;
            }
            temp=temp->next;
        }while(temp!=tail);
        

        if(res!=nullptr){
            cout<<"Element found at address: "<<res<<endl;
            
        }
        else{
            cout<<"Element not found!"<<endl;
        }

        return res;
    }


};
int main() {

    Node* tail = NULL;

    CLinkedlist list;

    list.insertNode(1, 3);
    list.insertNode(3, 5);

    list.insertNode(5, 9);
    list.insertNode(9, 11);

    list.insertNode(5, 7);
    list.print();

    
    list.deleteNode(5);
    list.print();

    list.insertNode(11,100);
    list.print();

    list.search(100);




    


    return 0;
}


--------------------------------------------------------------------------------



// 4. Implement Stack as an ADT and use it to evaluate a prefix/postfix expression.


#include<iostream>
#include<cmath>

using namespace std;

class Stack{
public:
    int* arr;
    int top;
    int size;

    Stack(int size){
        this->size=size;
        arr=new int[size];
        top =-1;

    }

    void push(int e){
        if(size-top>1){
            top++;
            arr[top]=e;
        }
        else{
            cout<<"StackOverflow"<<endl;
        }
    }
    void pop(){
        if(top>=0){
            top--;
        }
        else{
            cout<<"StackUnderflow"<<endl;
        }

    }
    int topp(){
        if(top>=0){
            return arr[top];
        }
        else{
            cout<<"Stack is empty!"<<endl;
            return -1;
        }
    }
    bool isEmpty(){
        if(top==-1){
            return true;
        }
        else{
            return false;
        }
    }



    void postfixeval(string exp,Stack s){
    
    
    int res;
    for(char x:exp){
        if((x-'0')==0||(x-'0')==1||(x-'0')==2||(x-'0')==3||
           (x-'0')==4||(x-'0')==5||(x-'0')==6||(x-'0')==7||
           (x-'0')==8||(x-'0')==9){
            s.push(x-'0');

        }
        else{
            if(x=='+'){
                int a=s.topp();
                s.pop();
                int b=s.topp();
                s.pop();
                res=b+a;
                s.push(res);
            }
            else if(x=='-'){
                int a=s.topp();
                s.pop();
                int b=s.topp();
                s.pop();
                res=b-a;
                s.push(res);
            }
            else if(x=='*'){
                int a=s.topp();
                s.pop();
                int b=s.topp();
                s.pop();
                res=b*a;
                s.push(res);
            }
            else if(x=='/'){
                int a=s.topp();
                s.pop();
                int b=s.topp();
                s.pop();
                res=b/a;
                s.push(res);
            }
            else if(x=='^'){
                int a=s.topp();
                s.pop();
                int b=s.topp();
                s.pop();
                res=pow(b,a);
                s.push(res);
            }
            
        }
    }
    cout<<s.topp();

}
    void prefixeval(string exp,Stack s){
    
    
    int res;
    for(int i=exp.size()-1;i>=0;i--){
        if((exp[i]-'0')==0||(exp[i]-'0')==1||(exp[i]-'0')==2||(exp[i]-'0')==3||
           (exp[i]-'0')==4||(exp[i]-'0')==5||(exp[i]-'0')==6||(exp[i]-'0')==7||
           (exp[i]-'0')==8||(exp[i]-'0')==9){
            s.push(exp[i]-'0');

        }
        else{
            if(exp[i]=='+'){
                int a=s.topp();
                s.pop();
                int b=s.topp();
                s.pop();
                res=a+b;
                s.push(res);
            }
            else if(exp[i]=='-'){
                int a=s.topp();
                s.pop();
                int b=s.topp();
                s.pop();
                res=a-b;
                s.push(res);
            }
            else if(exp[i]=='*'){
                int a=s.topp();
                s.pop();
                int b=s.topp();
                s.pop();
                res=a*b;
                s.push(res);
            }
            else if(exp[i]=='/'){
                int a=s.topp();
                s.pop();
                int b=s.topp();
                s.pop();
                res=a/b;
                s.push(res);
            }
            else if(exp[i]=='^'){
                int a=s.topp();
                s.pop();
                int b=s.topp();
                s.pop();
                res=pow(a,b);
                s.push(res);
            }
            
        }
    }
    cout<<s.topp();

}

};


int main (){

    Stack s(100);
    Stack s2(100);

    string postfixexp="231*+9-";
    s.postfixeval(postfixexp,s);
cout<<endl;
    string prefixexp="-+5/*6234";
    s.prefixeval(prefixexp,s2);



return 0;

}


--------------------------------------------------------------------------------



// 5. Implement Queue as an ADT.

#include<iostream>
using namespace std;

class Queue{
    int* arr;
    int front,rear,size;
public:

    Queue(int n){
        size=n;
        arr=new int[n];
        front=-1;
        rear=-1;
    }

    void enqueue(int e){
        if(front==(rear+1)%size){                                      // If Full
            cout<<"Queue is Full!"<<endl;                               

        }
        else if(front==-1){                                            // First element is being pushed 
            front=rear=0;
            arr[rear] = e;
        }
        else if(rear== size-1 && front!=0){                            // Maintaining cyclic nature
            rear=0;
            arr[rear]=e;
        }
        else{                                                          // Normal flow.....
            rear++;                                                    // Pushing......
            arr[rear]=e;
        }
    }


    void dequeue(){
        if(front==-1){
            cout<<"Queue is empty!"<<endl;
        }

        if(front==rear){
            front =-1;
            rear = -1;
        }
        else if(front==size-1){
            front =0;
        }
        else{
            front++;
        }

    }
    bool isEmpty(){
        if(front==-1 && rear==-1){
            return true;

        }
        else{
            return false;
        }

    }

    bool isFull(){
        if(front==(rear+1)%size){
            return true;
        }
        else{
            return false;
        }
    }

    void getfront(){
        cout<<arr[front]<<endl;
    }


    void showq(){

        int temp=front;

        if (front == -1) {
            cout << "Queue is empty!"<< endl;
            return;
        }

        do{
            cout<<arr[temp]<<" ";
            temp=(temp+1) %size;

        }while(temp!=(rear+1)%size);

    }

};


int main (){

    Queue q(5);

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);
    q.dequeue();
    q.dequeue();
    q.dequeue();
    q.dequeue();
    q.dequeue();
    // q.enqueue(60);
    // q.enqueue(70);
    // q.showq();


    cout<<q.isEmpty();
    cout<<endl;
    q.enqueue(5);
    
    cout<<q.isEmpty();
    cout<<endl;
    q.getfront();

return 0;
}


--------------------------------------------------------------------------------



// 6. Write a program to implement Binary Search Tree as an ADT which supports the following 
// operations:
// i. Insert an element x
// ii. Delete an element x
// iii. Search for an element x in the BST 
// iv. Display the elements of the BST in preorder, inorder, and postorder traversal


#include<iostream>
using namespace std;

class Node{
public:
    int data;
    Node* left;
    Node* right;

    Node(int d){
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }

};
class BSTtree{

public:
    Node* minVal(Node* node){
        Node* temp = node;

        while(temp->left!=NULL){
            temp=temp->left;
        }
        return temp;
    }

    Node* maxVal(Node* node){
        Node* temp = node;

        while(temp->right!=NULL){
            temp=temp->right;
        }
        return temp;
    }

    void takeinput(Node* &node){
        int data;
        cin>>data;

        while(data!= -1){
            insertintoBST(node,data);
            cin>>data;
        }
    }

    void preorder(Node* node){

        if(node==NULL){
            return;
        }
        cout<<node->data<<" ";
        preorder(node->left);
        preorder(node->right);
    }

    void inorder(Node* node){

        if(node==NULL){
            return;
        }
        inorder(node->left);
        cout<<node->data<<" ";
        inorder(node->right);
    }

    void postorder(Node* node){

        if(node==NULL){
            return;
        }
        postorder(node->left);
        postorder(node->right);
        cout<<node->data<<" ";
    }

 


    Node* insertintoBST(Node* &node,int d){

        if(node==NULL){
            node=new Node(d);
            return node;
        }

        if(d>node->data){
            node->right = insertintoBST(node->right,d); 
        }
        else{
            node->left = insertintoBST(node->left, d);
        }

        return node;
    };


    void searchBST(Node* node,int x){
        if(node == NULL){
            cout<<"Not found! "<<endl;
            return;

        }
        if(node->data ==x){
            cout<<"Founded "<<x<<endl;
            return;
        }
        if(node->data > x){
            searchBST(node->left,x);
        }
        else{
            searchBST(node->right,x);
        }

    }

    Node* deletenode(Node* &node,int val){

        if(node == NULL){
            return node;
        }

        if(node->data == val){
            // 0 child
            if(node->left==NULL && node->right == NULL){
                delete node;
                return NULL;
            }

            // 1 child

            if(node->left != NULL && node->right == NULL){
                    Node* temp = node->left;
                    delete node;
                    return temp;
                }
            if(node->left == NULL && node->right != NULL){
                    Node* temp = node->right;
                    delete node;
                    return temp;
                }

            // 2 child

            if(node->left != NULL && node->right != NULL){
                    
                    int min= minVal(node->right)->data;
                    node->data = min;
                    node->right = deletenode(node->right, min);
                    return node;

                }

        }
        else if(node->data > val){
            node->left = deletenode(node->left, val);
            return node;
        }
        else{
            node->right = deletenode(node->right, val);
            return node;
        }};






};

int main (){
    Node* root = NULL;

    BSTtree t;

    cout<<"Enter the data: "<<endl;
    t.takeinput(root);


    cout<<"Printing. . Preorder Traversal"<<endl;
    t.preorder(root);
    cout<<endl;
    cout<<"Printing. . Inorder Traversal"<<endl;
    t.inorder(root);
    cout<<endl;
    cout<<"Printing. . Postorder Traversal"<<endl;
    t.postorder(root);
    cout<<endl;

    t.searchBST(root,78);

    root=t.deletenode(root,50);

    cout<<"After Deletion"<<endl;
    t.preorder(root);

return 0;

}


--------------------------------------------------------------------------------





// 7. Write a program to implement insert and search operation in AVL trees.

#include<bits/stdc++.h> 
using namespace std; 
  
// An AVL tree node  
class Node  
{  
    public: 
    int key;  
    Node *left;  
    Node *right;  
    int height;  
};  
  
// A utility function to get the  
// height of the tree  
int height(Node *N)  
{  
    if (N == NULL)  
        return 0;  
    return N->height;  
}  
  
// A utility function to get maximum 
// of two integers  
int max(int a, int b)  
{  
    return (a > b)? a : b;  
}  
  
/* Helper function that allocates a  
   new node with the given key and  
   NULL left and right pointers. */
Node* newNode(int key)  
{  
    Node* node = new Node(); 
    node->key = key;  
    node->left = NULL;  
    node->right = NULL;  
    node->height = 1; // new node is initially 
                      // added at leaf  
    return(node);  
}  
  
// A utility function to right 
// rotate subtree rooted with y  
// See the diagram given above.  
Node *rightRotate(Node *y)  
{  
    Node *x = y->left;  
    Node *T2 = x->right;  
  
    // Perform rotation  
    x->right = y;  
    y->left = T2;  
  
    // Update heights  
    y->height = max(height(y->left), 
                    height(y->right)) + 1;  
    x->height = max(height(x->left), 
                    height(x->right)) + 1;  
  
    // Return new root  
    return x;  
}  
  
// A utility function to left  
// rotate subtree rooted with x  
// See the diagram given above.  
Node *leftRotate(Node *x)  
{  
    Node *y = x->right;  
    Node *T2 = y->left;  
  
    // Perform rotation  
    y->left = x;  
    x->right = T2;  
  
    // Update heights  
    x->height = max(height(x->left),     
                    height(x->right)) + 1;  
    y->height = max(height(y->left),  
                    height(y->right)) + 1;  
  
    // Return new root  
    return y;  
}  
  
// Get Balance factor of node N  
int getBalance(Node *N)  
{  
    if (N == NULL)  
        return 0;  
    return height(N->left) - height(N->right);  
}  
  
// Recursive function to insert a key 
// in the subtree rooted with node and 
// returns the new root of the subtree.  
Node* insert(Node* node, int key)  
{  
    /* 1. Perform the normal BST insertion */
    if (node == NULL)  
        return(newNode(key));  
  
    if (key < node->key)  
        node->left = insert(node->left, key);  
    else if (key > node->key)  
        node->right = insert(node->right, key);  
    else // Equal keys are not allowed in BST  
        return node;  
  
    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left),  
                        height(node->right));  
  
    /* 3. Get the balance factor of this ancestor  
        node to check whether this node became  
        unbalanced */
    int balance = getBalance(node);  
  
    // If this node becomes unbalanced, then  
    // there are 4 cases  
  
    // Left Left Case  
    if (balance > 1 && key < node->left->key)  
        return rightRotate(node);  
  
    // Right Right Case  
    if (balance < -1 && key > node->right->key)  
        return leftRotate(node);  
  
    // Left Right Case  
    if (balance > 1 && key > node->left->key)  
    {  
        node->left = leftRotate(node->left);  
        return rightRotate(node);  
    }  
  
    // Right Left Case  
    if (balance < -1 && key < node->right->key)  
    {  
        node->right = rightRotate(node->right);  
        return leftRotate(node);  
    }  
  
    /* return the (unchanged) node pointer */
    return node;  
}  

Node* search(Node* root, int key) {
    while (root != NULL && root->key != key) {
        if (key < root->key)
            root = root->left;
        else
            root = root->right;
    }
    return root;
}

  

void preOrder(Node *root)  
{  
    if(root != NULL)  
    {  
        cout << root->key << " ";  
        preOrder(root->left);  
        preOrder(root->right);  
    }  
}  
  
// Driver Code 
int main()  
{  
    Node *root = NULL;  

    root = insert(root, 50);  
    root = insert(root, 40);  
    root = insert(root, 80);  
    root = insert(root, 70);  
    root = insert(root, 90);  
    root = insert(root, 60);  

    preOrder(root); 


    // Node* result = search(root, 30); 
    // cout<<result;
    Node* result = search(root, 61); 
    cout<<endl;

    if (result != NULL)
        cout << "Key " << result->key << " found in the AVL tree." << endl;
    else
        cout << "Key not found in the AVL tree." << endl;

      
    return 0;  
}  











